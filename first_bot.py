# –∑–∞–ø—É—Å–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∞–º–∞–∑–æ–Ω–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–∫—É nohup python3 first_bot.py > /dev/null &
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from telegram import Sticker, StickerSet
import logging
import settings
import ephem
import datetime

logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s',
                    level=logging.INFO,
                    filename='bot.log'
                    )

# logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º –∫–ª—é—á–∞, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–º–∞–Ω–¥.
def main():
    updater = Updater(settings.TELEGRAM_API_KEY)  # –∫–ª—é—á —Ç–µ–ø–µ—Ä—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
    dp = updater.dispatcher
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    dp.add_error_handler(error)
    dp.add_handler(CommandHandler('start', user_welcomming))
    dp.add_handler(CommandHandler('planet', planet_status))
    dp.add_handler(CommandHandler('getsticker',get_sticker))
    dp.add_handler(MessageHandler(Filters.text, talking_with_user))
    updater.start_polling()
    updater.idle()


# —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–∞–Ω–¥—ã /start!
def user_welcomming(bot, update):
    my_text = "–ó–¥–∞—Ä–æ–≤–∞ {}! –Ø —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª –∂–∏—Ç—å! \n" \
              "–ú–æ–≥—É —Å–∫–∞–∑–∞—Ç—å –≤ –∫–∞–∫–æ–º —Å–æ–∑–≤–µ–∑–¥–∏–∏ –ø–ª–∞–Ω–µ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è. –ù–∞–ø–∏—à–∏ /planet Mars –Ω–∞–ø—Ä–∏–º–µ—Ä\n" \
              "–ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–æ–º. –ù–∞–ø–∏—à–∏ /getsticker –∏ —Å–º–∞–π–ª–∏–∫ üòï –Ω–∞–ø—Ä–∏–º–µ—Ä.\n" \
              "—É –º–µ–Ω—è –µ—Å—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –Ω–∞ —ç—Ç–∏ —ç–º–æ–¥–∑–∏:üòïüòÇüòäüòè".format(update.message.chat.first_name)
    logging.info('–ü–æ–ª—å–∑–æ–∞–≤—Ç–µ–ª—å {} –Ω–∞–∂–∞–ª /start'.format(update.message.chat.username))
    update.message.reply_text(my_text)


# –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def talking_with_user(bot, update):
    user_text = update.message.text
    logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} ({}) –≤–≤–µ–ª: {} '.format(update.message.chat.username,
                                                          update.message.chat.first_name,
                                                          user_text))  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —á—Ç–æ –ø–∏—à–µ—Ç —é–∑–µ—Ä
    update.message.reply_text('–¢—ã –Ω–∞–ø–∏—Å–∞–ª: '+user_text + '... –ù–æ –¥–ª—è –º–µ–Ω—è —ç—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—á–∏—Ç. \n –ù–∞–ø–∏—à–∏ /start')


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /planet "Planet"  –∏ –≤—ã–¥–∞—á–∏ —Å–æ–∑–≤–µ–∑–¥–∏—è –ø–ª–∞–Ω–µ—Ç—ã —Å–µ–≥–æ–¥–Ω—è
def planet_status(bot, update):
    today_date = datetime.datetime.now().strftime('%Y/%m/%d')
    user_text = update.message.text
    logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} ({}) –≤–≤–µ–ª: {} '.format(update.message.chat.username,
                                                          update.message.chat.first_name,
                                                          user_text))
    if 'Venus' in user_text:
        update.message.reply_text("–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ–∑–≤–µ–∑–¥–∏–∏ {}".format(ephem.constellation(ephem.Venus(today_date))[1]))
    elif 'Mars' in user_text:
        update.message.reply_text("–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ–∑–≤–µ–∑–¥–∏–∏ {}".format(ephem.constellation(ephem.Mars(today_date))[1]))
    elif 'Mercury' in user_text:
        update.message.reply_text("–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ–∑–≤–µ–∑–¥–∏–∏ {}".format(ephem.constellation(ephem.Mercury(today_date))[1]))
    elif 'Earth' in user_text:
        update.message.reply_text("–ù—É —Ç—ã –≤ —Å–≤–æ–µ–º —É–º–µ?)")
    elif 'Jupiter' in user_text:
        update.message.reply_text("–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ–∑–≤–µ–∑–¥–∏–∏ {}".format(ephem.constellation(ephem.Jupiter(today_date))[1]))
    elif 'Saturn' in user_text:
        update.message.reply_text("–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ–∑–≤–µ–∑–¥–∏–∏ {}".format(ephem.constellation(ephem.Saturn(today_date))[1]))
    elif 'Uranus' in user_text:
        update.message.reply_text("–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ–∑–≤–µ–∑–¥–∏–∏ {}".format(ephem.constellation(ephem.Uranus(today_date))[1]))
    elif 'Neptune' in user_text:
        update.message.reply_text("–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ–∑–≤–µ–∑–¥–∏–∏ {}".format(ephem.constellation(ephem.Neptune(today_date))[1]))
    else:
        update.message.reply_text("–ü–ª–∞–Ω–µ—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –Ω–∞–¥–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä /planet Venus")

def get_sticker(bot, update):
    user_emoji = update.message.text
    print(user_emoji)
    logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} ({}) –≤–≤–µ–ª: {} '.format(update.message.chat.username,
                                                          update.message.chat.first_name,
                                                          user_emoji))
    if "üòï" in user_emoji:
        update.message.reply_sticker(Sticker(file_id='CAADAgADOAADX8p-CzLiVfbJsCagAg',width=100,height=100))
    elif "üòÇ" in user_emoji:
        update.message.reply_sticker(Sticker(file_id='CAADAgADwgYAAvoLtghYZz5i3gqMNgI', width=100, height=100))
    elif "üòä" in user_emoji:
        update.message.reply_sticker(Sticker(file_id='CAADAgAD2gYAAvoLtgggBeUJREiG7QI', width=100, height=100))
    elif "üòè" in user_emoji:
        update.message.reply_sticker(Sticker(file_id='CAADAgADXgAD1jUSAAHMmC9kAAFQGeUC', width=100, height=100))
    else:
        update.message.reply_text("–ù–∞ —Ç–∞–∫–æ–π –≠–º–æ–¥–∑–∏ —Å—Ç–∏–∫–µ—Ä–∞ —É –º–µ–Ω—è –Ω–µ—Ç, –∏–∑–≤–∏–Ω–∏ =(")

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def error(bot, update, error):
    # —Ç—É—Ç –æ–Ω –ø–∏—à–µ—Ç –≤ —á–µ–º —Å—É—Ç—å –æ—à–∏–±–∫–∏
    # logging.warning('Update "%s" caused error "%s"', update, error)
    pass  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏


if __name__ == "__main__":
    logging.info('Bot has been started')  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ —É—Å–ø–µ—à–Ω–æ–º –±–æ—Ç–∞ –≤ –ª–æ–≥–µ
    main()
